# Required secrets
#   UNITY_LICENSE: The contents of Unity license file
name: 🧪 Test

env:
  # MINIMUM_VERSION: The minimum version of Unity.
  MINIMUM_VERSION: 2020.1
  # ADDITIONAL_VERSIONS: Included specific versions of Unity.
  ADDITIONAL_VERSIONS: |
    2020.3.10f1
    2020.3.20f1
    2020.3.30f1
    2020.3.40f1
    2021.3.10f1
    2021.3.20f1
    2022.2.10f1
    2022.3.10f1

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    tags:
      - "!*"
    paths-ignore:
      - "*.md"
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  setup:
    name: ⚙️ Setup
    runs-on: ubuntu-latest
    outputs:
      unityVersions: ${{ steps.setup.outputs.unityVersions }}
    steps:
      - name: ⚙️ Find target Unity versions
        id: setup
        run: |
          echo "==== Target Unity Versions ===="
          LATEST_VERSIONS=`npx unity-changeset list --versions --latest-patch --min ${MINIMUM_VERSION} --json --all`
          OLDEST_VERSIONS=`npx unity-changeset list --versions --oldest-patch --min ${MINIMUM_VERSION} --json`
          ADDITIONAL_VERSIONS=`echo "${ADDITIONAL_VERSIONS}" | jq -R | jq -sc 'map(select(length > 0))'`
          VERSIONS=`echo "[${LATEST_VERSIONS}, ${OLDEST_VERSIONS}, ${ADDITIONAL_VERSIONS}]" | jq -c 'flatten|sort|unique'`
          echo "unityVersions=${VERSIONS}" | tee $GITHUB_OUTPUT

  test:
    name: 🧪 Run tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        unityVersion: ${{ fromJson(needs.setup.outputs.unityVersions) }}
    steps:
      - name: 🚚 Checkout
        uses: actions/checkout@v4

      - name: 📥 Cache library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.unityVersion }}-${{ github.sha }}
          restore-keys: |
            Library-${{ matrix.unityVersion }}-
            Library-

      - name: 🧪 Run tests
        uses: game-ci/unity-test-runner@v4
        timeout-minutes: 30
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          customImage: mobsakai/unity3d:${{ matrix.unityVersion }}
          # unityVersion: ${{ matrix.unityVersion }}
          customParameters: -nographics
          checkName: ${{ matrix.unityVersion }} Test Results
          githubToken: ${{ github.token }}
          coverageOptions: "dontClear;generateHtmlReport;generateBadgeReport;pathFilters:+**/Packages/src/**;assemblyFilters:+<packages>,-*.Editor,-*.Test"
